import { NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

// GET a specific order by ID
export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const id = params.id
    
    const { data, error } = await supabase
      .from('orders')
      .select(`
        *,
        customer:customers(*),
        order_items:order_items(
          *,
          product:products(*)
        ),
        invoices:invoices(*)
      `)
      .eq('id', id)
      .single()
    
    if (error) {
      return NextResponse.json({ error: error.message }, { status: 500 })
    }
    
    if (!data) {
      return NextResponse.json({ error: 'Order not found' }, { status: 404 })
    }
    
    return NextResponse.json({ order: data })
  } catch (error) {
    console.error('Error fetching order:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// PUT update an order
export async function PUT(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const id = params.id
    const body = await request.json()
    const { notes, status } = body
    
    // Check if we're trying to confirm the order, which will trigger invoice generation
    const isConfirming = status === 'confirmed'
    
    // First, check if the order exists and get its current status
    const { data: existingOrder, error: fetchError } = await supabase
      .from('orders')
      .select('status')
      .eq('id', id)
      .single()
    
    if (fetchError || !existingOrder) {
      return NextResponse.json({ error: 'Order not found' }, { status: 404 })
    }
    
    // If we're confirming an already confirmed order, prevent duplicate invoice generation
    if (isConfirming && existingOrder.status === 'confirmed') {
      return NextResponse.json({ 
        error: 'Order is already confirmed and invoice has been generated' 
      }, { status: 400 })
    }
    
    // Update the order
    const { data, error } = await supabase
      .from('orders')
      .update({ notes, status })
      .eq('id', id)
      .select()
    
    if (error) {
      return NextResponse.json({ error: error.message }, { status: 500 })
    }
    
    if (data.length === 0) {
      return NextResponse.json({ error: 'Order not found' }, { status: 404 })
    }
    
    // If the order was confirmed, an invoice will be automatically generated by the database trigger
    // Let's fetch the complete order with the newly generated invoice
    let completeOrder = data[0]
    
    if (isConfirming) {
      const { data: orderWithInvoice, error: invoiceError } = await supabase
        .from('orders')
        .select(`
          *,
          customer:customers(*),
          order_items:order_items(
            *,
            product:products(*)
          ),
          invoices:invoices(*)
        `)
        .eq('id', id)
        .single()
      
      if (!invoiceError && orderWithInvoice) {
        completeOrder = orderWithInvoice
      }
    }
    
    return NextResponse.json({ 
      order: completeOrder,
      message: isConfirming ? '注文が確認され、請求書が自動生成されました' : '注文が更新されました'
    })
  } catch (error) {
    console.error('Error updating order:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// DELETE an order
export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const id = params.id
    
    // Check if the order has an associated invoice
    const { data: orderData, error: fetchError } = await supabase
      .from('orders')
      .select('status, invoices:invoices(id)')
      .eq('id', id)
      .single()
    
    if (fetchError) {
      return NextResponse.json({ error: fetchError.message }, { status: 500 })
    }
    
    // Prevent deletion of confirmed orders with invoices
    if (orderData?.status === 'confirmed' && orderData?.invoices?.length > 0) {
      return NextResponse.json({ 
        error: 'Cannot delete an order with generated invoices. Cancel the invoices first.' 
      }, { status: 400 })
    }
    
    // Delete order items first (cascade delete should handle this, but being explicit)
    const { error: itemsError } = await supabase
      .from('order_items')
      .delete()
      .eq('order_id', id)
    
    if (itemsError) {
      return NextResponse.json({ error: itemsError.message }, { status: 500 })
    }
    
    // Then delete the order
    const { error } = await supabase
      .from('orders')
      .delete()
      .eq('id', id)
    
    if (error) {
      return NextResponse.json({ error: error.message }, { status: 500 })
    }
    
    return NextResponse.json({ success: true, message: '注文が削除されました' })
  } catch (error) {
    console.error('Error deleting order:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
