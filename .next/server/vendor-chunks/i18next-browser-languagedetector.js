"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/i18next-browser-languagedetector";
exports.ids = ["vendor-chunks/i18next-browser-languagedetector"];
exports.modules = {

/***/ "(ssr)/./node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Browser)\n/* harmony export */ });\nconst { slice, forEach } = [];\nfunction defaults(obj) {\n    forEach.call(slice.call(arguments, 1), (source)=>{\n        if (source) {\n            for(const prop in source){\n                if (obj[prop] === undefined) obj[prop] = source[prop];\n            }\n        }\n    });\n    return obj;\n}\nfunction hasXSS(input) {\n    if (typeof input !== \"string\") return false;\n    // Common XSS attack patterns\n    const xssPatterns = [\n        /<\\s*script.*?>/i,\n        /<\\s*\\/\\s*script\\s*>/i,\n        /<\\s*img.*?on\\w+\\s*=/i,\n        /<\\s*\\w+\\s*on\\w+\\s*=.*?>/i,\n        /javascript\\s*:/i,\n        /vbscript\\s*:/i,\n        /expression\\s*\\(/i,\n        /eval\\s*\\(/i,\n        /alert\\s*\\(/i,\n        /document\\.cookie/i,\n        /document\\.write\\s*\\(/i,\n        /window\\.location/i,\n        /innerHTML/i\n    ];\n    return xssPatterns.some((pattern)=>pattern.test(input));\n}\n// eslint-disable-next-line no-control-regex\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\nconst serializeCookie = function(name, val) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        path: \"/\"\n    };\n    const opt = options;\n    const value = encodeURIComponent(val);\n    let str = `${name}=${value}`;\n    if (opt.maxAge > 0) {\n        const maxAge = opt.maxAge - 0;\n        if (Number.isNaN(maxAge)) throw new Error(\"maxAge should be a Number\");\n        str += `; Max-Age=${Math.floor(maxAge)}`;\n    }\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError(\"option domain is invalid\");\n        }\n        str += `; Domain=${opt.domain}`;\n    }\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError(\"option path is invalid\");\n        }\n        str += `; Path=${opt.path}`;\n    }\n    if (opt.expires) {\n        if (typeof opt.expires.toUTCString !== \"function\") {\n            throw new TypeError(\"option expires is invalid\");\n        }\n        str += `; Expires=${opt.expires.toUTCString()}`;\n    }\n    if (opt.httpOnly) str += \"; HttpOnly\";\n    if (opt.secure) str += \"; Secure\";\n    if (opt.sameSite) {\n        const sameSite = typeof opt.sameSite === \"string\" ? opt.sameSite.toLowerCase() : opt.sameSite;\n        switch(sameSite){\n            case true:\n                str += \"; SameSite=Strict\";\n                break;\n            case \"lax\":\n                str += \"; SameSite=Lax\";\n                break;\n            case \"strict\":\n                str += \"; SameSite=Strict\";\n                break;\n            case \"none\":\n                str += \"; SameSite=None\";\n                break;\n            default:\n                throw new TypeError(\"option sameSite is invalid\");\n        }\n    }\n    if (opt.partitioned) str += \"; Partitioned\";\n    return str;\n};\nconst cookie = {\n    create (name, value, minutes, domain) {\n        let cookieOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n            path: \"/\",\n            sameSite: \"strict\"\n        };\n        if (minutes) {\n            cookieOptions.expires = new Date();\n            cookieOptions.expires.setTime(cookieOptions.expires.getTime() + minutes * 60 * 1000);\n        }\n        if (domain) cookieOptions.domain = domain;\n        document.cookie = serializeCookie(name, value, cookieOptions);\n    },\n    read (name) {\n        const nameEQ = `${name}=`;\n        const ca = document.cookie.split(\";\");\n        for(let i = 0; i < ca.length; i++){\n            let c = ca[i];\n            while(c.charAt(0) === \" \")c = c.substring(1, c.length);\n            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n        }\n        return null;\n    },\n    remove (name, domain) {\n        this.create(name, \"\", -1, domain);\n    }\n};\nvar cookie$1 = {\n    name: \"cookie\",\n    // Deconstruct the options object and extract the lookupCookie property\n    lookup (_ref) {\n        let { lookupCookie } = _ref;\n        if (lookupCookie && typeof document !== \"undefined\") {\n            return cookie.read(lookupCookie) || undefined;\n        }\n        return undefined;\n    },\n    // Deconstruct the options object and extract the lookupCookie, cookieMinutes, cookieDomain, and cookieOptions properties\n    cacheUserLanguage (lng, _ref2) {\n        let { lookupCookie, cookieMinutes, cookieDomain, cookieOptions } = _ref2;\n        if (lookupCookie && typeof document !== \"undefined\") {\n            cookie.create(lookupCookie, lng, cookieMinutes, cookieDomain, cookieOptions);\n        }\n    }\n};\nvar querystring = {\n    name: \"querystring\",\n    // Deconstruct the options object and extract the lookupQuerystring property\n    lookup (_ref) {\n        let { lookupQuerystring } = _ref;\n        let found;\n        if (false) {}\n        return found;\n    }\n};\nvar hash = {\n    name: \"hash\",\n    // Deconstruct the options object and extract the lookupHash property and the lookupFromHashIndex property\n    lookup (_ref) {\n        let { lookupHash, lookupFromHashIndex } = _ref;\n        let found;\n        if (false) {}\n        return found;\n    }\n};\nlet hasLocalStorageSupport = null;\nconst localStorageAvailable = ()=>{\n    if (hasLocalStorageSupport !== null) return hasLocalStorageSupport;\n    try {\n        hasLocalStorageSupport =  false && 0;\n        if (!hasLocalStorageSupport) {\n            return false;\n        }\n        const testKey = \"i18next.translate.boo\";\n        window.localStorage.setItem(testKey, \"foo\");\n        window.localStorage.removeItem(testKey);\n    } catch (e) {\n        hasLocalStorageSupport = false;\n    }\n    return hasLocalStorageSupport;\n};\nvar localStorage = {\n    name: \"localStorage\",\n    // Deconstruct the options object and extract the lookupLocalStorage property\n    lookup (_ref) {\n        let { lookupLocalStorage } = _ref;\n        if (lookupLocalStorage && localStorageAvailable()) {\n            return window.localStorage.getItem(lookupLocalStorage) || undefined; // Undefined ensures type consistency with the previous version of this function\n        }\n        return undefined;\n    },\n    // Deconstruct the options object and extract the lookupLocalStorage property\n    cacheUserLanguage (lng, _ref2) {\n        let { lookupLocalStorage } = _ref2;\n        if (lookupLocalStorage && localStorageAvailable()) {\n            window.localStorage.setItem(lookupLocalStorage, lng);\n        }\n    }\n};\nlet hasSessionStorageSupport = null;\nconst sessionStorageAvailable = ()=>{\n    if (hasSessionStorageSupport !== null) return hasSessionStorageSupport;\n    try {\n        hasSessionStorageSupport =  false && 0;\n        if (!hasSessionStorageSupport) {\n            return false;\n        }\n        const testKey = \"i18next.translate.boo\";\n        window.sessionStorage.setItem(testKey, \"foo\");\n        window.sessionStorage.removeItem(testKey);\n    } catch (e) {\n        hasSessionStorageSupport = false;\n    }\n    return hasSessionStorageSupport;\n};\nvar sessionStorage = {\n    name: \"sessionStorage\",\n    lookup (_ref) {\n        let { lookupSessionStorage } = _ref;\n        if (lookupSessionStorage && sessionStorageAvailable()) {\n            return window.sessionStorage.getItem(lookupSessionStorage) || undefined;\n        }\n        return undefined;\n    },\n    cacheUserLanguage (lng, _ref2) {\n        let { lookupSessionStorage } = _ref2;\n        if (lookupSessionStorage && sessionStorageAvailable()) {\n            window.sessionStorage.setItem(lookupSessionStorage, lng);\n        }\n    }\n};\nvar navigator$1 = {\n    name: \"navigator\",\n    lookup (options) {\n        const found = [];\n        if (typeof navigator !== \"undefined\") {\n            const { languages, userLanguage, language } = navigator;\n            if (languages) {\n                // chrome only; not an array, so can't use .push.apply instead of iterating\n                for(let i = 0; i < languages.length; i++){\n                    found.push(languages[i]);\n                }\n            }\n            if (userLanguage) {\n                found.push(userLanguage);\n            }\n            if (language) {\n                found.push(language);\n            }\n        }\n        return found.length > 0 ? found : undefined;\n    }\n};\nvar htmlTag = {\n    name: \"htmlTag\",\n    // Deconstruct the options object and extract the htmlTag property\n    lookup (_ref) {\n        let { htmlTag } = _ref;\n        let found;\n        const internalHtmlTag = htmlTag || (typeof document !== \"undefined\" ? document.documentElement : null);\n        if (internalHtmlTag && typeof internalHtmlTag.getAttribute === \"function\") {\n            found = internalHtmlTag.getAttribute(\"lang\");\n        }\n        return found;\n    }\n};\nvar path = {\n    name: \"path\",\n    // Deconstruct the options object and extract the lookupFromPathIndex property\n    lookup (_ref) {\n        let { lookupFromPathIndex } = _ref;\n        if (true) return undefined;\n        const language = window.location.pathname.match(/\\/([a-zA-Z-]*)/g);\n        if (!Array.isArray(language)) return undefined;\n        const index = typeof lookupFromPathIndex === \"number\" ? lookupFromPathIndex : 0;\n        return language[index]?.replace(\"/\", \"\");\n    }\n};\nvar subdomain = {\n    name: \"subdomain\",\n    lookup (_ref) {\n        let { lookupFromSubdomainIndex } = _ref;\n        // If given get the subdomain index else 1\n        const internalLookupFromSubdomainIndex = typeof lookupFromSubdomainIndex === \"number\" ? lookupFromSubdomainIndex + 1 : 1;\n        // get all matches if window.location. is existing\n        // first item of match is the match itself and the second is the first group match which should be the first subdomain match\n        // is the hostname no public domain get the or option of localhost\n        const language =  false && 0;\n        // if there is no match (null) return undefined\n        if (!language) return undefined;\n        // return the given group match\n        return language[internalLookupFromSubdomainIndex];\n    }\n};\n// some environments, throws when accessing document.cookie\nlet canCookies = false;\ntry {\n    // eslint-disable-next-line no-unused-expressions\n    document.cookie;\n    canCookies = true;\n// eslint-disable-next-line no-empty\n} catch (e) {}\nconst order = [\n    \"querystring\",\n    \"cookie\",\n    \"localStorage\",\n    \"sessionStorage\",\n    \"navigator\",\n    \"htmlTag\"\n];\nif (!canCookies) order.splice(1, 1);\nconst getDefaults = ()=>({\n        order,\n        lookupQuerystring: \"lng\",\n        lookupCookie: \"i18next\",\n        lookupLocalStorage: \"i18nextLng\",\n        lookupSessionStorage: \"i18nextLng\",\n        // cache user language\n        caches: [\n            \"localStorage\"\n        ],\n        excludeCacheFor: [\n            \"cimode\"\n        ],\n        // cookieMinutes: 10,\n        // cookieDomain: 'myDomain'\n        convertDetectedLanguage: (l)=>l\n    });\nclass Browser {\n    constructor(services){\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        this.type = \"languageDetector\";\n        this.detectors = {};\n        this.init(services, options);\n    }\n    init() {\n        let services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            languageUtils: {}\n        };\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        let i18nOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        this.services = services;\n        this.options = defaults(options, this.options || {}, getDefaults());\n        if (typeof this.options.convertDetectedLanguage === \"string\" && this.options.convertDetectedLanguage.indexOf(\"15897\") > -1) {\n            this.options.convertDetectedLanguage = (l)=>l.replace(\"-\", \"_\");\n        }\n        // backwards compatibility\n        if (this.options.lookupFromUrlIndex) this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;\n        this.i18nOptions = i18nOptions;\n        this.addDetector(cookie$1);\n        this.addDetector(querystring);\n        this.addDetector(localStorage);\n        this.addDetector(sessionStorage);\n        this.addDetector(navigator$1);\n        this.addDetector(htmlTag);\n        this.addDetector(path);\n        this.addDetector(subdomain);\n        this.addDetector(hash);\n    }\n    addDetector(detector) {\n        this.detectors[detector.name] = detector;\n        return this;\n    }\n    detect() {\n        let detectionOrder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.order;\n        let detected = [];\n        detectionOrder.forEach((detectorName)=>{\n            if (this.detectors[detectorName]) {\n                let lookup = this.detectors[detectorName].lookup(this.options);\n                if (lookup && typeof lookup === \"string\") lookup = [\n                    lookup\n                ];\n                if (lookup) detected = detected.concat(lookup);\n            }\n        });\n        detected = detected.filter((d)=>d !== undefined && d !== null && !hasXSS(d)).map((d)=>this.options.convertDetectedLanguage(d));\n        if (this.services && this.services.languageUtils && this.services.languageUtils.getBestMatchFromCodes) return detected; // new i18next v19.5.0\n        return detected.length > 0 ? detected[0] : null; // a little backward compatibility\n    }\n    cacheUserLanguage(lng) {\n        let caches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.caches;\n        if (!caches) return;\n        if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1) return;\n        caches.forEach((cacheName)=>{\n            if (this.detectors[cacheName]) this.detectors[cacheName].cacheUserLanguage(lng, this.options);\n        });\n    }\n}\nBrowser.type = \"languageDetector\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js\n");

/***/ })

};
;